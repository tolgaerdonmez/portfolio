{"version":3,"sources":["webpack:///./src/components/ProjectCard.js","webpack:///./src/pages/projects.js","webpack:///./src/components/Layout.js","webpack:///./src/components/Navbar.js","webpack:///./src/components/Typewriter.js"],"names":["ProjectCard","props","className","description","languages","edges","length","style","color","node","name","extraBody","url","href","target","rel","extraFooter","githubQuery","ProjectsPage","repositories","data","githubData","user","nodes","Layout","Typewriter","text","onlyText","cursorVariant","map","repo","key","children","fullwidth","Navbar","to","useState","count","setCount","useEffect","setTimeout","slice"],"mappings":"qNAgCeA,MA9Bf,SAAqBC,GACnB,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,qBACb,4BAAKD,EAAME,aACVF,EAAMG,WAAaH,EAAMG,UAAUC,MAAMC,OACxC,iDACqB,IACnB,0BAAMC,MAAO,CAAEC,MAAOP,EAAMG,UAAUC,MAAM,GAAGI,KAAKD,QACjDP,EAAMG,UAAUC,MAAM,GAAGI,KAAKC,OAGjC,KACHT,EAAMU,UACL,yBAAKT,UAAU,2BAA2BD,EAAMU,WAC9C,MAEN,yBAAKT,UAAU,uBACZD,EAAMW,IACL,uBAAGC,KAAMZ,EAAMW,IAAKE,OAAO,SAASC,IAAI,cAAxC,gBAEE,uBAAGb,UAAU,mBAEb,KACHD,EAAMe,aAAe,Q,YCcvB,IAAMC,EAAW,YA0BTC,UA3Df,YAAiC,IACzBC,EADwB,EAARC,KACIC,WAAWD,KAAKE,KAAKH,aAAaI,MAC5D,OACE,kBAACC,EAAA,EAAD,KACE,4BACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,cAAcC,UAAQ,EAACC,cAAc,UAExD,yBAAK1B,UAAU,iBACb,kBAAC,EAAD,CACEC,YAAa,cACbQ,UACE,oCACE,0EACA,mGAMJK,YACE,uBAAGH,KAAK,yBAAyBC,OAAO,SAASC,IAAI,cAArD,oBAEE,uBAAGb,UAAU,0BAIlBiB,EAAaU,KAAI,SAACC,EAAMC,GAAP,OAChB,kBAAC,EAAD,eAAaA,IAAKA,GAASD,W,6DClCrC,+CAaeN,IATf,YAA+B,IAAbQ,EAAY,EAAZA,SAChB,OACE,oCACE,kBAAC,IAAD,CAAQC,WAAW,IACnB,yBAAK/B,UAAU,oBAAoB8B,M,yDCRzC,iDA0BeE,IAtBf,YAAgC,IAAdD,EAAa,EAAbA,UAChB,OACE,yBAAK/B,UAAc+B,EAAY,mBAAqB,kBAClD,4BACGA,EACC,4BACE,kBAAC,OAAD,CAAME,GAAG,KACP,uBAAGjC,UAAU,wBAGf,KACJ,4BACE,kBAAC,OAAD,CAAMiC,GAAG,UAAT,UAEF,4BACE,kBAAC,OAAD,CAAMA,GAAG,aAAT,iB,kCCnBV,mCA4BeV,IAzBf,YAAwD,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,cAAiB,EAC3BQ,mBAAS,GAA5BC,EAD8C,KACvCC,EADuC,KASrD,OAPAC,qBAAU,WACJF,IAAUX,EAAKpB,QACjBkC,YAAW,WACTF,EAASD,EAAQ,KAChB,OACJ,CAACA,EAAOX,IAEPC,EAEA,oCACGD,EAAKe,MAAM,EAAGJ,GACf,0BAAMnC,UAAS,WAAY0B,GAAiB,YAKhD,uBAAG1B,UAAU,cACTmC,EAAuBX,EAAKe,MAAM,EAAGJ,GAA7B,aAAqC,IAC/C,0BAAMnC,UAAS,WAAY0B,GAAiB,c","file":"component---src-pages-projects-js-73b93df480a1ad292414.js","sourcesContent":["import React from \"react\";\n\nfunction ProjectCard(props) {\n  return (\n    <div className=\"project-card\">\n      <div className=\"project-card-body\">\n        <h4>{props.description}</h4>\n        {props.languages && props.languages.edges.length ? (\n          <h5>\n            Main Dev Language:{\" \"}\n            <span style={{ color: props.languages.edges[0].node.color }}>\n              {props.languages.edges[0].node.name}\n            </span>\n          </h5>\n        ) : null}\n        {props.extraBody ? (\n          <div className=\"project-card-extra-body\">{props.extraBody}</div>\n        ) : null}\n      </div>\n      <div className=\"project-card-footer\">\n        {props.url ? (\n          <a href={props.url} target=\"_blank\" rel=\"noreferrer\">\n            See on github\n            <i className=\"bx bxl-github\"></i>\n          </a>\n        ) : null}\n        {props.extraFooter || null}\n      </div>\n    </div>\n  );\n}\n\nexport default ProjectCard;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport \"../sass/ProjectPage.scss\";\nimport Layout from \"../components/Layout\";\nimport ProjectCard from \"../components/ProjectCard\";\nimport Typewriter from \"../components/Typewriter\";\n\nfunction ProjectsPage({ data }) {\n  const repositories = data.githubData.data.user.repositories.nodes;\n  return (\n    <Layout>\n      <h1>\n        <Typewriter text=\"My Projects\" onlyText cursorVariant=\"dark\" />\n      </h1>\n      <div className=\"projects-grid\">\n        <ProjectCard\n          description={\"Tweet Story\"}\n          extraBody={\n            <>\n              <p>A mobile app that reads your tweets for you</p>\n              <p>\n                It's far more better than a screen reader, helpful for blind\n                people\n              </p>\n            </>\n          }\n          extraFooter={\n            <a href=\"https://tweetstory.app\" target=\"_blank\" rel=\"noreferrer\">\n              Visit app website\n              <i className=\"bx bxs-right-arrow\"></i>\n            </a>\n          }\n        />\n        {repositories.map((repo, key) => (\n          <ProjectCard key={key} {...repo} />\n        ))}\n      </div>\n    </Layout>\n  );\n}\nexport const githubQuery = graphql`\n  query {\n    githubData {\n      data {\n        user {\n          repositories {\n            nodes {\n              name\n              description\n              url\n              languages {\n                edges {\n                  node {\n                    name\n                    color\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default ProjectsPage;\n","import React from \"react\";\nimport Navbar from \"./Navbar\";\nimport \"../sass/Layout.scss\";\n\nfunction Layout({ children }) {\n  return (\n    <>\n      <Navbar fullwidth={true} />\n      <div className=\"layout-container\">{children}</div>\n    </>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport \"../sass/Navbar.scss\";\nimport { Link } from \"gatsby\";\n\nfunction Navbar({ fullwidth }) {\n  return (\n    <nav className={`${fullwidth ? \"navbar-fullwidth\" : \"navbar-regular\"}`}>\n      <ul>\n        {fullwidth ? (\n          <li>\n            <Link to=\"/\">\n              <i className=\"bx bxs-left-arrow\"></i>\n            </Link>\n          </li>\n        ) : null}\n        <li>\n          <Link to=\"/about\">About</Link>\n        </li>\n        <li>\n          <Link to=\"/projects\">Projects</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React, { useEffect, useState } from \"react\";\nimport \"../sass/Typewriter.scss\";\n\nfunction Typewriter({ text, onlyText, cursorVariant }) {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    if (count !== text.length)\n      setTimeout(() => {\n        setCount(count + 1);\n      }, 150);\n  }, [count, text]);\n\n  if (onlyText)\n    return (\n      <>\n        {text.slice(0, count)}\n        <span className={`cursor-${cursorVariant || \"light\"}`}></span>\n      </>\n    );\n\n  return (\n    <p className=\"typewriter\">\n      {!count ? \"Loading...\" : text.slice(0, count)}{\" \"}\n      <span className={`cursor-${cursorVariant || \"light\"}`}></span>\n    </p>\n  );\n}\n\nexport default Typewriter;\n"],"sourceRoot":""}