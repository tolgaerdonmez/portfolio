{"version":3,"sources":["webpack:///./src/components/Layout.js","webpack:///./src/components/ProjectCard.js","webpack:///./src/pages/projects/index.js","webpack:///./src/components/Navbar.js","webpack:///./src/components/Typewriter.js"],"names":["Layout","children","fullwidth","className","ProjectCard","props","console","log","hasReadme","name","to","description","languages","edges","length","style","color","node","extraBody","url","href","target","rel","extraFooter","githubQuery","ProjectsPage","repositories","data","githubData","user","nodes","reposWithReadme","filter","repo","Typewriter","text","onlyText","cursorVariant","map","key","x","Navbar","useState","count","setCount","useEffect","setTimeout","slice"],"mappings":"sHAAA,+CAaeA,IATf,YAA+B,IAAbC,EAAY,EAAZA,SAChB,OACE,oCACE,kBAAC,IAAD,CAAQC,WAAW,IACnB,yBAAKC,UAAU,oBAAoBF,M,sKCgC1BG,MArCf,SAAqBC,GAEnB,OADAC,QAAQC,IAAIF,EAAMG,WAEhB,yBAAKL,UAAU,gBACb,yBAAKA,UAAU,qBACb,4BACGE,EAAMI,MAAQJ,EAAMG,UACnB,kBAAC,OAAD,CAAME,GAAI,aAAeL,EAAMI,MAAOJ,EAAMM,aAE5CN,EAAMM,aAGTN,EAAMO,WAAaP,EAAMO,UAAUC,MAAMC,OACxC,iDACqB,IACnB,0BAAMC,MAAO,CAAEC,MAAOX,EAAMO,UAAUC,MAAM,GAAGI,KAAKD,QACjDX,EAAMO,UAAUC,MAAM,GAAGI,KAAKR,OAGjC,KACHJ,EAAMa,UACL,yBAAKf,UAAU,2BAA2BE,EAAMa,WAC9C,MAEN,yBAAKf,UAAU,uBACZE,EAAMc,IACL,uBAAGC,KAAMf,EAAMc,IAAKE,OAAO,SAASC,IAAI,cAAxC,gBAEE,uBAAGnB,UAAU,mBAEb,KACHE,EAAMkB,aAAe,Q,YCevB,IAAMC,EAAW,YA0BTC,UApEf,YAAiC,IACzBC,EADwB,EAARC,KACIC,WAAWD,KAAKE,KAAKH,aAAaI,MACtDC,EAAkB,GAAGC,QAAO,SAAAC,GAAI,OAAkB,OAAdA,EAAKN,QAE/C,OADArB,QAAQC,IAAIwB,GAEV,kBAAC/B,EAAA,EAAD,KACE,4BACE,kBAACkC,EAAA,EAAD,CAAYC,KAAK,cAAcC,UAAQ,EAACC,cAAc,UAExD,yBAAKlC,UAAU,iBACb,kBAAC,EAAD,CACEQ,YAAa,cACbO,UACE,oCACE,0EACA,mGAMJK,YACE,uBAAGH,KAAK,yBAAyBC,OAAO,SAASC,IAAI,cAArD,oBAEE,uBAAGnB,UAAU,0BAIlBuB,EAAaY,KAAI,SAACL,EAAMM,GAAP,OAChB,kBAAC,EAAD,eACEA,IAAKA,GACDN,EAFN,CAGEzB,YACIuB,EAAgBC,QAAO,SAAAQ,GAAC,OAAIA,EAAE/B,OAASwB,EAAKxB,QAAMK,iB,yDCxClE,iDA0Be2B,IAtBf,YAAgC,IAAdvC,EAAa,EAAbA,UAChB,OACE,yBAAKC,UAAcD,EAAY,mBAAqB,kBAClD,4BACGA,EACC,4BACE,kBAAC,OAAD,CAAMQ,GAAG,KACP,uBAAGP,UAAU,wBAGf,KACJ,4BACE,kBAAC,OAAD,CAAMO,GAAG,UAAT,UAEF,4BACE,kBAAC,OAAD,CAAMA,GAAG,aAAT,iB,kCCnBV,mCA4BewB,IAzBf,YAAwD,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,cAAiB,EAC3BK,mBAAS,GAA5BC,EAD8C,KACvCC,EADuC,KASrD,OAPAC,qBAAU,WACJF,IAAUR,EAAKrB,QACjBgC,YAAW,WACTF,EAASD,EAAQ,KAChB,OACJ,CAACA,EAAOR,IAEPC,EAEA,oCACGD,EAAKY,MAAM,EAAGJ,GACf,0BAAMxC,UAAS,WAAYkC,GAAiB,YAKhD,uBAAGlC,UAAU,cACTwC,EAAuBR,EAAKY,MAAM,EAAGJ,GAA7B,aAAqC,IAC/C,0BAAMxC,UAAS,WAAYkC,GAAiB,c","file":"component---src-pages-projects-index-js-3abf6bd3dfb34fcebba7.js","sourcesContent":["import React from \"react\";\nimport Navbar from \"./Navbar\";\nimport \"../sass/Layout.scss\";\n\nfunction Layout({ children }) {\n  return (\n    <>\n      <Navbar fullwidth={true} />\n      <div className=\"layout-container\">{children}</div>\n    </>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\n\nfunction ProjectCard(props) {\n  console.log(props.hasReadme);\n  return (\n    <div className=\"project-card\">\n      <div className=\"project-card-body\">\n        <h4>\n          {props.name && props.hasReadme ? (\n            <Link to={\"/projects/\" + props.name}>{props.description}</Link>\n          ) : (\n            props.description\n          )}\n        </h4>\n        {props.languages && props.languages.edges.length ? (\n          <h5>\n            Main Dev Language:{\" \"}\n            <span style={{ color: props.languages.edges[0].node.color }}>\n              {props.languages.edges[0].node.name}\n            </span>\n          </h5>\n        ) : null}\n        {props.extraBody ? (\n          <div className=\"project-card-extra-body\">{props.extraBody}</div>\n        ) : null}\n      </div>\n      <div className=\"project-card-footer\">\n        {props.url ? (\n          <a href={props.url} target=\"_blank\" rel=\"noreferrer\">\n            See on github\n            <i className=\"bx bxl-github\"></i>\n          </a>\n        ) : null}\n        {props.extraFooter || null}\n      </div>\n    </div>\n  );\n}\n\nexport default ProjectCard;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport \"../../sass/ProjectsPage.scss\";\nimport Layout from \"../../components/Layout\";\nimport ProjectCard from \"../../components/ProjectCard\";\nimport Typewriter from \"../../components/Typewriter\";\n\nfunction ProjectsPage({ data }) {\n  const repositories = data.githubData.data.user.repositories.nodes;\n  const reposWithReadme = [].filter(repo => repo.data !== null);\n  console.log(reposWithReadme);\n  return (\n    <Layout>\n      <h1>\n        <Typewriter text=\"My Projects\" onlyText cursorVariant=\"dark\" />\n      </h1>\n      <div className=\"projects-grid\">\n        <ProjectCard\n          description={\"Tweet Story\"}\n          extraBody={\n            <>\n              <p>A mobile app that reads your tweets for you</p>\n              <p>\n                It's far more better than a screen reader, helpful for blind\n                people\n              </p>\n            </>\n          }\n          extraFooter={\n            <a href=\"https://tweetstory.app\" target=\"_blank\" rel=\"noreferrer\">\n              Visit app website\n              <i className=\"bx bxs-right-arrow\"></i>\n            </a>\n          }\n        />\n        {repositories.map((repo, key) => (\n          <ProjectCard\n            key={key}\n            {...repo}\n            hasReadme={\n              !!reposWithReadme.filter(x => x.name === repo.name).length\n            }\n          />\n        ))}\n      </div>\n    </Layout>\n  );\n}\n\nexport const githubQuery = graphql`\n  query {\n    githubData {\n      data {\n        user {\n          repositories {\n            nodes {\n              name\n              description\n              url\n              languages {\n                edges {\n                  node {\n                    name\n                    color\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default ProjectsPage;\n","import React from \"react\";\nimport \"../sass/Navbar.scss\";\nimport { Link } from \"gatsby\";\n\nfunction Navbar({ fullwidth }) {\n  return (\n    <nav className={`${fullwidth ? \"navbar-fullwidth\" : \"navbar-regular\"}`}>\n      <ul>\n        {fullwidth ? (\n          <li>\n            <Link to=\"/\">\n              <i className=\"bx bxs-left-arrow\"></i>\n            </Link>\n          </li>\n        ) : null}\n        <li>\n          <Link to=\"/about\">About</Link>\n        </li>\n        <li>\n          <Link to=\"/projects\">Projects</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React, { useEffect, useState } from \"react\";\nimport \"../sass/Typewriter.scss\";\n\nfunction Typewriter({ text, onlyText, cursorVariant }) {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    if (count !== text.length)\n      setTimeout(() => {\n        setCount(count + 1);\n      }, 150);\n  }, [count, text]);\n\n  if (onlyText)\n    return (\n      <>\n        {text.slice(0, count)}\n        <span className={`cursor-${cursorVariant || \"light\"}`}></span>\n      </>\n    );\n\n  return (\n    <p className=\"typewriter\">\n      {!count ? \"Loading...\" : text.slice(0, count)}{\" \"}\n      <span className={`cursor-${cursorVariant || \"light\"}`}></span>\n    </p>\n  );\n}\n\nexport default Typewriter;\n"],"sourceRoot":""}